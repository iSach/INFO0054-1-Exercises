3 										-> 3
#t 										-> #t
(+ 1 2) 								-> 3
(/ 2 3) 								-> 0.666667
(+ (* 3 4) 10)							-> 22
(* 3 (- 12 5))							-> 21 
(+ (+ 2 3) (+ 4 5))						-> 14
(- (+ 5 8) (+ 2 4))						-> 7
(define a 4)							-> bounds 4 to a
a										-> 4
’a										-> a
(define b a)							-> bounds [[a]]=4 to b
b										-> 4 
(define a 6)							-> bounds 6 to a
a										-> 6
b										-> 4
(define d #t)							-> bounds #t to d
(define Robert ’Bob)					-> bounds Bob to Robert
Robert									-> Bob
(null? ’a)								-> #f
(number? 1)								-> #t
(number? ’1)							-> #t (!) not a symbol so '1 = 1
(number? #t)							-> #f
(number? ’a)							-> #f
(number? a)								-> #t
(boolean? 3)							-> #f
(boolean? #t)							-> #t
(boolean? #f)							-> #t
(boolean? ’#t)							-> #t (!) '#t = #t!!!
(boolean? ’d)							-> #f
(boolean? d)							-> erreur d n'existe pas
(symbol? ’b)							-> #t
(symbol? #f)							-> #f (!) #f is not a symbol.
(cons ’a ’())							-> (a)
(cons ’a ’(b))							-> (a b)
(car ’(a b))							-> a
(cdr ’(a b))							-> (b) (!) cdr = reste = liste
(car (cdr '(a b)))						-> b
(cdr (cdr '(a b)))						-> () (!)
(cadr '(a b c d))						-> b (NB: cadr = car (cdr ...))
(cadar '((a b) (c d) (e f)))			-> b
(null? (car '(())))						-> #t (!) (()) = empty (???)
(equal? '(car '((b) c)) (cdr '(a b)))	-> #t

NB: Liste = '() (vide) ou '(a b) où a = qlconque et b = liste
e.g. (1 2 3 4) = 1 U (2 3 4) où (2 3 4) = 2 U (3 4) où (3 4) = 3 U (4) où (4) = 4 U ()